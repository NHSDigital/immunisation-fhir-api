parameters:
  - name: aws_dev
    default: aws --profile=apim-dev
  - name: is_ptl
    default: true

steps:
  - ${{ if parameters.is_ptl }}:
    - template: "azure/components/aws-assume-role.yml@common"
      parameters:
        role: "auto-ops"
        profile: "apm_ptl"

    - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
      parameters:
        secret_file_ids:
          - ptl/app-credentials/jwt_testing/non-prod/JWT_TESTING_PRIVATE_KEY
        secret_ids:
          - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INTROSPECTION_CLIENT_ID
          - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INTROSPECTION_CLIENT_SECRET
          - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INTROSPECTION_CLIENT_ID_INT
          - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INTROSPECTION_CLIENT_SECRET_INT
          - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INT_CLIENT_ID
          - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INT_CLIENT_SECRET

  - bash: |
      make install-python
    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
    displayName: Setup pytests
    condition: always()

  - template: "azure/components/aws-assume-role.yml@common"
    parameters:
      role: "auto-ops"
      profile: "apim-dev"
      aws_account: "dev"

  - bash: |
      set -e
      if ! [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]; then
        export AWS_PROFILE=apim-dev
        aws_account_no="$(aws sts get-caller-identity --query Account --output text)"

        service_name=$(FULLY_QUALIFIED_SERVICE_NAME)

        pr_no=$(echo $service_name | { grep -oE '[0-9]+$' || true; })
        if [ -z $pr_no ]; then
          workspace=$APIGEE_ENVIRONMENT
        else
          workspace=pr-$pr_no
        fi

        echo sandbox with following parameters:
        echo service_name: $service_name
        echo workspace: $workspace
        echo Apigee environment: $APIGEE_ENVIRONMENT
        echo pr_no: $pr_no

          cd terraform

        make init
          make apply aws_account_no=${aws_account_no} environment=$workspace

          AWS_DOMAIN_NAME=$(make -s output name=service_domain_name)
          DYNAMODB_TABLE_NAME=$(make -s output name=dynamodb_table_name)
          echo "##vso[task.setvariable variable=AWS_DOMAIN_NAME]$AWS_DOMAIN_NAME"
          echo "##vso[task.setvariable variable=DYNAMODB_TABLE_NAME]$DYNAMODB_TABLE_NAME"
      fi
    displayName: Apply Terraform
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"
    retryCountOnTaskFailure: 2

  - bash: |
      set -ex
      if ! [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]; then
        counter=0
        base_path="$SERVICE_BASE_PATH"

        endpoint="https://${APIGEE_ENVIRONMENT}.api.service.nhs.uk/${base_path}/_status"
        while [[ $counter -lt 11 ]]; do
          response=$(curl -H "apikey: $(status-endpoint-api-key)" -s "$endpoint")
          response_code=$(jq -r '.checks.healthcheck.responseCode' <<< "$response")
          response_body=$(jq -r '.checks.healthcheck.outcome' <<< "$response")
          if [ "$response_code" -eq 200 ] && [ "$response_body" == "OK" ]; then
              echo "Status test successful"
              break
          else
              echo "Waiting for $endpoint to return a 200 response with 'OK' body..."
              ((counter=counter+1)) # Increment counter by 1
              echo "Attempt $counter"
              sleep 30
          fi
        done
        if [ $counter -eq 11 ]; then
            echo "Status test failed: Maximum number of attempts reached"
            exit 1
        fi
      fi
    displayName: Waiting for TF resources to be UP
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"

  - bash: |
      set -e
      export RELEASE_RELEASEID=$(Build.BuildId)
      export SOURCE_COMMIT_ID=$(Build.SourceVersion)
      export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
      export APIGEE_USERNAME=apm-testing-internal-dev@nhs.net
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
      export STATUS_API_KEY="$(status-endpoint-api-key)"
      export AWS_DOMAIN_NAME="$(AWS_DOMAIN_NAME)"
      export DYNAMODB_TABLE_NAME="$(DYNAMODB_TABLE_NAME)"
      export APIGEE_APP_ID=973b20ff-6e57-4248-b94f-200a18a03e37
      echo "api key- $STATUS_API_KEY"

      #Exporting the same profile with which Terraform got deployed
      export AWS_PROFILE=apim-dev
      aws_account_no="$(aws sts get-caller-identity --query Account --output text)"
      echo aws_account_no: $aws_account_no

      poetry lock --no-update
      poetry install

      test_cmd="poetry run python -m unittest"
      # Run test_deployment before doing anything. This will wait until deployment is ready
      $test_cmd -c -v -k test_deployment

      if [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]; then
        echo "Sandbox env tests"
        echo "running: $test_cmd -c -v -k test_proxy.TestProxyHealthcheck -k test_deployment"
        $test_cmd -c -v -k test_proxy.TestProxyHealthcheck -k test_deployment

      elif [[ $APIGEE_ENVIRONMENT == "ref" ]]; then
        echo "running: $test_cmd -v -c test_deployment.py test_proxy.py"
        $test_cmd -v -c test_deployment.py test_proxy.py

      elif [[ $APIGEE_ENVIRONMENT == "int" ]]; then
        export DEFAULT_CLIENT_ID="$(INT_CLIENT_ID)"
        export DEFAULT_CLIENT_SECRET="$(INT_CLIENT_SECRET)"
        echo "running: $test_cmd -v -c test_deployment.py test_proxy.py"
        $test_cmd -v -c test_deployment.py test_proxy.py

      else
        echo "running: $test_cmd -v -c"
        $test_cmd -v -c
      fi

    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/e2e"
    displayName: Run full test suite

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: always()
    inputs:
      testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/test-report.xml'
      failTaskOnFailedTests: true
