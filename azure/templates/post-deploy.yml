parameters:
  - name: aws_dev
    default: aws --profile=apim-dev
  - name: is_ptl
    default: true

steps:
  - ${{ if parameters.is_ptl }}:
    - template: "azure/components/aws-assume-role.yml@common"
      parameters:
          role: "auto-ops"
          profile: "apm_ptl"

  - bash: |
      make install-python
    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
    displayName: Setup pytests
    condition: always()
  
  - template: "azure/components/aws-assume-role.yml@common"
    parameters:
      role: "auto-ops"
      profile: "apim-dev"
      aws_account: "dev"

  - bash: |
      set -e
      if ! [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]; then
        export AWS_PROFILE=apim-dev
        aws_account_no="$(aws sts get-caller-identity --query Account --output text)"

        service_name=$(FULLY_QUALIFIED_SERVICE_NAME)

        pr_no=$(echo $service_name | { grep -oE '[0-9]+$' || true; })
        if [ -z $pr_no ]; then
          workspace=$APIGEE_ENVIRONMENT
        else
          workspace=pr-$pr_no
        fi

        echo Deploy mock provider with following parameters:
        echo service_name: $service_name
        echo workspace: $workspace
        echo Apigee environment: $APIGEE_ENVIRONMENT
        echo pr_no: $pr_no

        cd terraform
        make init
        make apply aws_account_no=${aws_account_no} environment=$workspace 
        cd ..
      fi
    displayName: Deploy mock provider
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"
    retryCountOnTaskFailure: 2


  - bash: |
      set -e
      export RELEASE_RELEASEID=$(Build.BuildId)
      export SOURCE_COMMIT_ID=$(Build.SourceVersion)
      export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
      export STATUS_ENDPOINT_API_KEY="$(status-endpoint-api-key)"
      marker="not mock_provider_int"
      if [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]
      then
        echo "Sandox env tests"
        marker="not nhsd_apim_authorization and not sandbox_int"
      elif [[ $APIGEE_ENVIRONMENT == "int" ]]
      then
       echo "Int tests to be set as of now"
      fi
      echo "Internal-dev env tests"
      echo "$marker"
      poetry run pytest -v -m $marker --api-name=immunisation-fhir-api --proxy-name=$PROXY_NAME -o junit_logging=all --junitxml=test-report.xml
      
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests"
    displayName: Run full test suite

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: always()
    inputs:
      testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/test-report.xml'
      failTaskOnFailedTests: true
