parameters:
  - name: is_ptl
    default: true

steps:
  - ${{ if parameters.is_ptl }}:
      - template: "azure/components/aws-assume-role.yml@common"
        parameters:
          role: "auto-ops"
          profile: "apm_ptl"

      - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
        parameters:
          secret_file_ids:
            - ptl/app-credentials/jwt_testing/non-prod/JWT_TESTING_PRIVATE_KEY
          secret_ids:
            - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INTROSPECTION_CLIENT_ID
            - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INTROSPECTION_CLIENT_SECRET
            - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INTROSPECTION_CLIENT_ID_INT
            - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INTROSPECTION_CLIENT_SECRET_INT
            - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INT_CLIENT_ID
            - ptl/app-credentials/immunisation-fhir-api-testing-app/non-prod/INT_CLIENT_SECRET

  - bash: |
      set -ex

      status_endpoint="https://${APIGEE_ENVIRONMENT}.api.service.nhs.uk/${SERVICE_BASE_PATH}/_status"

      counter=0
      while [[ $counter -lt 31 ]]; do
        response=$(curl -H "apikey: $(status-endpoint-api-key)" -s "$status_endpoint")
        response_code=$(jq -r '.checks.healthcheck.responseCode' <<< "$response")
        response_body=$(jq -r '.checks.healthcheck.outcome' <<< "$response")
        status=$(jq -r '.status' <<< "$response")
        if [ "$response_code" -eq 200 ] && [ "$response_body" == "OK" ] && [ "$status" == "pass" ]; then
            echo "Status test successful"
            break
        else
            echo "Waiting for $status_endpoint to return a 200 response with 'OK' body..."
            ((counter=counter+1)) # Increment counter by 1
            echo "Attempt $counter"
            sleep 30
        fi
      done

      if [ $counter -eq 31 ]; then
          echo "Status test failed: Maximum number of attempts reached"
          echo "Last response received:"
          echo "$response"
          exit 1
      fi
    displayName: Wait for API to be available
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"

  - bash: |
      pyenv install -s 3.11.11
      pyenv global 3.11.11
      python --version
    displayName: Install python 3.11

  - bash: |
      set -e
      export RELEASE_RELEASEID=$(Build.BuildId)
      export SOURCE_COMMIT_ID=$(Build.SourceVersion)
      export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
      export APIGEE_USERNAME=apm-testing-internal-dev@nhs.net
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
      export STATUS_API_KEY="$(status-endpoint-api-key)"
      export APIGEE_APP_ID=973b20ff-6e57-4248-b94f-200a18a03e37
      echo "api key- $STATUS_API_KEY"

      poetry lock --no-update
      poetry install

      test_cmd="poetry run python -m unittest"
      # Run test_deployment before doing anything. This will wait until deployment is ready
      $test_cmd -c -v -k test_deployment

      echo "Sandbox env tests"
      echo "running: $test_cmd -c -v -k test_proxy.TestProxyHealthcheck -k test_deployment"
      $test_cmd -c -v -k test_proxy.TestProxyHealthcheck

    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/e2e"
    displayName: Run Sandbox Test Suite

  - task: PublishTestResults@2
    displayName: "Publish test results"
    condition: always()
    inputs:
      testResultsFiles: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/test-report.xml"
      failTaskOnFailedTests: true
