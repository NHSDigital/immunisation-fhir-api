parameters:
  - name: service_name
    type: string
  - name: short_service_name
    type: string
  - name: fully_qualified_service_name
    type: string
    default: ''
  - name: environment
    type: string
  - name: variables
    type: object
    default: []
  - name: pr_label
    type: string
    default: ''
  - name: proxy_path
    type: string
    default: 'internal-dev'    
  - name: secret_file_ids
    type: object
    default: []
  - name: secret_ids
    type: object
    default: []
  - name: config_ids
    type: object
    default: []
  - name: post_init
    type: stepList
    default: []
  - name: notify
    type: boolean
    default: true
  - name: python_version
    type: string
    default: "3.8"

jobs:
  - job: deploy
    displayName: Deployment
    timeoutInMinutes: 30
    pool:
      name: 'AWS-ECS'
    workspace:
      clean: all
    variables:
      ${{ each var in parameters.variables }}:
        ${{ var.key }}: ${{ var.value }}
    steps:

      - bash: |
          if [ ! -z "$(ls -A \"$(Pipeline.Workspace)/s/${{ parameters.service_name }}\" 2>/dev/null)" ]; then
            echo "workspace directory is not empty!"
            exit 1
          fi
        displayName: "check workspace is clean"
      - bash: |
          instance_id="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
          echo instance-id: "${instance_id}"
          echo connect to: https://eu-west-2.console.aws.amazon.com/systems-manager/session-manager/${instance_id}
          echo sudo su - ubuntu
          or
          echo ssh ubuntu@${instance_id}
          echo working directory: $(System.DefaultWorkingDirectory)
        displayName: print aws info
      - template: azure/components/aws-clean-config.yml@common

      - ${{ if parameters.notify }}:
        - template: azure/components/aws-assume-role.yml@common
          parameters:
            role: "auto-ops"
            profile: "apm_ptl"

        - template: azure/components/get-aws-secrets-and-ssm-params.yml@common
          parameters:
            secret_file_ids:
              - ${{ each secret_file_id in parameters.secret_file_ids }}:
                - ${{ secret_file_id }}
            secret_ids:
              - ptl/access-tokens/github/repo-status-update/GITHUB_ACCESS_TOKEN
              - ${{ each secret_id in parameters.secret_ids }}:
                - ${{ secret_id }}
            config_ids:
              - /ptl/azure-devops/GITHUB_USER
              - ${{ each config_id in parameters.config_ids }}:
                - ${{ config_id }}

        - bash: |
            echo "Build.SourceBranch: $(Build.SourceBranch)"
            echo "Build.SourceBranchName: $(Build.SourceBranchName)"
            echo "Build.SourceVersion: $(Build.SourceVersion)"
            echo "Build.SourceVersionMessage: $(Build.SourceVersionMessage)"
            if [[ ! -z $(NOTIFY_COMMIT_SHA) ]]; then
                echo "##[debug]Using already provided NOTIFY_COMMIT_SHA=$(NOTIFY_COMMIT_SHA)"
            else
                NOTIFY_COMMIT_SHA=""
                if [[ "$(Build.SourceBranch)" =~ ^refs/tags/.+$ ]]; then
                    echo "##[debug]Build appears to be a tag build"
                    echo "##[debug]Using Build.SourceVersion as NOTIFY_COMMIT_SHA"
                    NOTIFY_COMMIT_SHA="$(Build.SourceVersion)"
                fi
                if [[ "$(Build.SourceBranch)" =~ ^refs/pull/.+$ ]]; then
                    echo "##[debug]Build appears to be a pull request build"
                    echo "##[debug]Extracting NOTIFY_COMMIT_SHA from Build.SourceVersionMessage"
                    NOTIFY_COMMIT_SHA=`echo "$(Build.SourceVersionMessage)" | cut -d' ' -f2`
                fi
                if [[ -z $NOTIFY_COMMIT_SHA ]]; then
                    echo "##[debug]Build does not appear to be pull or tag build"
                    echo "##[debug]Using Build.SourceVersion as NOTIFY_COMMIT_SHA"
                    NOTIFY_COMMIT_SHA="$(Build.SourceVersion)"
                fi
                echo "##vso[task.setvariable variable=NOTIFY_COMMIT_SHA]$NOTIFY_COMMIT_SHA"
            fi
          displayName: Set NOTIFY_COMMIT_SHA
          condition: always()
        - template: azure/components/update-github-status.yml@common
          parameters:
            state: pending
            description: "Deployment started"

        - bash: |
            set -euo pipefail
            echo "For backward compatibility..."
            echo "##vso[task.setvariable variable=APIGEE_ENVIRONMENT]${{ parameters.environment }}"
          displayName: Setting AWS_ENVIRONMENT=${{ parameters.environment }}
        - bash: |
            if [[ ! -z $(UTILS_PR_NUMBER) ]]; then
                echo "##[debug]Triggered from utils repository, PR_NUMBER=$(UTILS_PR_NUMBER)"
                echo "##vso[task.setvariable variable=PR_NUMBER]$(UTILS_PR_NUMBER)"
            else
                echo "##[debug]PR_NUMBER=pr-$(System.PullRequest.PullRequestNumber)"
                echo "##vso[task.setvariable variable=PR_LABEL]pr-$(System.PullRequest.PullRequestNumber)"
            fi
          displayName: Set PR Label
        - bash: |
            set -euo pipefail
            if [[ ! -z $(UTILS_PR_NUMBER) ]]; then
              if [[ "${{ parameters.proxy_path }}" == "live" ]]; then
                export FULLY_QUALIFIED_SERVICE_NAME="${{ parameters.service_name }}-$(PR_LABEL)"
                echo "##vso[task.setvariable variable=FULLY_QUALIFIED_SERVICE_NAME]${FULLY_QUALIFIED_SERVICE_NAME}"
              else
                export FULLY_QUALIFIED_SERVICE_NAME="${{ parameters.service_name }}-$(PR_LABEL)-${{ parameters.proxy_path }}"
                echo "##vso[task.setvariable variable=FULLY_QUALIFIED_SERVICE_NAME]${FULLY_QUALIFIED_SERVICE_NAME}"
              fi
              echo "##[debug]Triggered from utils repository, FULLY_QUALIFIED_SERVICE_NAME=${FULLY_QUALIFIED_SERVICE_NAME}"
            else
              export FULLY_QUALIFIED_SERVICE_NAME="${{ parameters.service_name }}-$(PR_LABEL)"
              echo "##[debug]FULLY_QUALIFIED_SERVICE_NAME=${{ parameters.service_name }}-$(PR_LABEL)"
              echo "##vso[task.setvariable variable=FULLY_QUALIFIED_SERVICE_NAME]${FULLY_QUALIFIED_SERVICE_NAME}"
            fi
          displayName: Override FULLY_QUALIFIED_SERVICE_NAME
        
      - checkout: self
        path: "s/${{ parameters.service_name }}"
        submodules: true

      - task: UsePythonVersion@0
        displayName: "Use Python ${{ parameters.python_version }}"
        inputs:
          versionSpec: ${{ parameters.python_version }}

      - ${{ each post_init in parameters.post_init }}:
          - ${{ post_init }}

      - ${{ if parameters.notify }}:
        - template: azure/components/update-github-status.yml@common
          parameters:
            state: success
            on_success: true
            description: "Deploy succeeded"

        - template: azure/components/update-github-status.yml@common
          parameters:
            state: failure
            on_failure: true
            description: "Deploy failed"