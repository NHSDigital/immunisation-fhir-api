parameters:
  - name: 'role'
    type: string
  - name: 'profile'
    type: string
    default: ''
  - name: 'aws_account_id'
    type: string

steps:
  - template: "azure/components/aws-clean-config.yml@common"

  - bash: |
      set -e
      echo "##vso[task.setvariable variable=ROLE]${{ parameters.role }}"
      echo "##vso[task.setvariable variable=AWS_ACCOUNT_ID]${{ parameters.aws_account_id }}"
    displayName: get imms role name
  - bash: |
      set -e

      echo "Running aws sts get-caller-identity:"
      aws sts get-caller-identity

      aws_role="$ROLE"
      aws_account_id="$AWS_ACCOUNT_ID"

      echo "Assume role: ${aws_role}"
      echo "Account ID: ${aws_account_id}"

      aws_role_arn="arn:aws:iam::${aws_account_id}:role/${aws_role}"
      echo "AWS role ARN: ${aws_role_arn}"

      echo "Checking if role exists"
      for i in {1..15}; do
        if aws iam get-role --role-name "${aws_role}" > /dev/null 2>&1; then
          echo "Role exists"
          sleep 2
          break
        fi
        echo "Waiting for role ..."
        sleep 2
      done

      cp "${HOME}/.aws/config.default" "${HOME}/.aws/config"
      tmp_file="${AGENT_TEMPDIRECTORY}/.aws.tmp.creds.json"

      for i in {2..4}; do
        if aws sts assume-role --role-arn "${aws_role_arn}" --role-session-name build-assume-role > "${tmp_file}"; then
          echo "Assumed role"
          assumed_role="yes"
          break
        fi
        sleep_for=$((i * 10))
        echo "Retrying assume-role in $sleep_for seconds..."
        sleep "$sleep_for"
      done

      if [[ "${assumed_role}" != "yes" ]]; then
        echo "Assume role failed"
        exit 1
      fi

      echo "aws_access_key_id = $(jq -r .Credentials.AccessKeyId "${tmp_file}")" >> "${HOME}/.aws/config"
      echo "aws_secret_access_key = $(jq -r .Credentials.SecretAccessKey "${tmp_file}")" >> "${HOME}/.aws/config"
      echo "aws_session_token = $(jq -r .Credentials.SessionToken "${tmp_file}")" >> "${HOME}/.aws/config"

      expiry=$(jq -r .Credentials.Expiration "${tmp_file}")
      echo "##vso[task.setvariable variable=ASSUME_ROLE_EXPIRY;]$expiry"

      rm "${tmp_file}"

      profile="${{ parameters.profile }}"
      if [[ -n "${profile}" ]]; then
        echo "Using profile: ${profile}"
        sed -i "s#\[default\]#\[profile ${profile}\]#" "${HOME}/.aws/config"
      fi

    displayName: assume role
    condition: and(succeeded(), ne(variables['ROLE'], ''))