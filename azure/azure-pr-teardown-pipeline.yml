name: "$(SourceBranchName)+$(BuildID)"

trigger: none
pr: none

resources:
  repositories:
    - repository: common
      type: github
      name: NHSDigital/api-management-utils
      ref: refs/heads/edge
      endpoint: NHSDigital

variables:
  - template: project.yml

jobs:
  - job: teardown
    displayName: PR Teardown
    timeoutInMinutes: 30
    pool:
      name: 'AWS-ECS'
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        path: "s/$(SERVICE_NAME)"

      - bash: |
          echo $(action_pr_number)
          WORKSPACE="pr-"$(ACTION_PR_NUMBER)
          echo $WORKSPACE
          echo "##vso[task.setvariable variable=WORKSPACE]$WORKSPACE"
          echo "##vso[task.setvariable variable=ACTION_PR_NUMBER]$(ACTION_PR_NUMBER)"
          echo $(SERVICE_NAME)
        displayName: Set workspace tag

      - template: ./templates/aws-assume-role.yml
        parameters:
            role: "auto-ops"
            profile: "apim-dev"
            aws_account: "dev"

      - bash: |
          echo "##vso[task.setvariable variable=AWS_DEFAULT_REGION]eu-west-2"
          echo "##vso[task.setvariable variable=APIGEE_ENVIRONMENT]internal-dev"
        displayName: Set AWS default region and Terraform state bucket
      
      - bash: |
          export AWS_PROFILE=apim-dev
          account_id="$(aws sts get-caller-identity --query Account --output text)"

          export ENVIRONMENT="internal-dev"
          export BUCKET_NAME="immunisation-internal-dev-terraform-state-files"
          cd terraform
          make init

          # Extract values from Terraform state before destroying
          ID_SYNC_QUEUE_ARN=$(make -s output name=id_sync_queue_arn)
          echo "##vso[task.setvariable variable=ID_SYNC_QUEUE_ARN]$ID_SYNC_QUEUE_ARN"
        displayName: "Init Terraform and extract MNS values"

      - bash: |
          export AWS_PROFILE=apim-dev
          echo "unsubscribing SQS Queue from MNS notifications."
          pyenv install -s 3.11.11
          pyenv local 3.11.11
          echo "Setting up poetry environment..."
          poetry env use 3.11
          poetry install --no-root

          echo "Setting PYTHONPATH..."
          export PYTHONPATH=$(Pipeline.Workspace)/s/$(SERVICE_NAME)/mns_subscription

          echo "unsubscribing SQS to MNS for notifications..."
          poetry run python src/unsubscribe_mns.py
        displayName: "Unsubscribe MNS"
        workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/mns_subscription"
        env:
          SQS_ARN: "$(ID_SYNC_QUEUE_ARN)"

      - bash: |
          export AWS_PROFILE=apim-dev
          export ENVIRONMENT="dev"
          export SUB_ENVIRONMENT="$WORKSPACE"
          
          terraform workspace new "$SUB_ENVIRONMENT" || terraform workspace select "$SUB_ENVIRONMENT"
          make destroy aws_account_no=${account_id} environment="$ENVIRONMENT" sub_environment="$SUB_ENVIRONMENT"
        displayName: Destroy terraform PR workspace and linked resources
        retryCountOnTaskFailure: 2
