name: Deploy to INT and run E2e test
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Debug OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/auto-ops
          role-session-name: github-actions

      - name: Whoami
        run: aws sts get-caller-identity

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Terraform Init
        working-directory: ${{ vars.TERRAFORM_DIR_PATH }}
        run: |
          export ENVIRONMENT=${{ inputs.environment }}
          make init

      - name: Terraform Plan
        working-directory: ${{ vars.TERRAFORM_DIR_PATH }}
        run: |
          make plan environment=${{ inputs.environment }} aws_account_name=int

  terraform-apply:
    needs: terraform-plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: int
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/auto-ops
          role-session-name: github-actions

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Terraform Init
        working-directory: ${{ vars.TERRAFORM_DIR_PATH }}
        run: |
          export ENVIRONMENT=${{ inputs.environment }}
          make init

      - name: Terraform Apply
        working-directory: ${{ vars.TERRAFORM_DIR_PATH }}
        run: |
          make apply environment=${{ inputs.environment }} aws_account_name=int

  e2e-tests:
    needs: terraform-apply
    if: ${{ vars.RUN_E2E == 'true' || inputs.environment == vars.ACTIVE_ENVIRONMENT }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/auto-ops
          role-session-name: github-actions

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set Poetry to use Python 3.11
        working-directory: ${{ vars.E2E_DIR_PATH }}
        run: |
          poetry env use $(which python3.11)

      - name: Install dependencies with Poetry
        working-directory: ${{ vars.E2E_DIR_PATH }}
        run: |
          poetry install --no-root

      - name: Run e2e tests
        working-directory: ${{ vars.E2E_DIR_PATH }}
        run: |
          apigee_token=$(aws ssm get-parameter \
            --name "/imms/apigee/non-prod/token" \
            --with-decryption \
            --query "Parameter.Value" \
            --output text)

          status_api_key=$(aws ssm get-parameter \
            --name "/imms/apigee/non-prod/status-api-key" \
            --with-decryption \
            --query "Parameter.Value" \
            --output text)

          export APIGEE_ACCESS_TOKEN=$apigee_token
          export APIGEE_USERNAME=apm-testing-internal-dev@nhs.net
          export APIGEE_ENVIRONMENT=int
          export STATUS_API_KEY=$status_api_key
          export PROXY_NAME=immunisation-fhir-api-internal-dev
          export SERVICE_BASE_PATH=immunisation-fhir-api/FHIR/R4
          export SSO_LOGIN_URL=https://login.apigee.com

          make run-immunization
