name: Deploy Template

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Connect to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/auto-ops
          role-session-name: github-actions

      - name: Whoami
        run: aws sts get-caller-identity

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Terraform Init
        working-directory: ${{ vars.TERRAFORM_DIR_PATH }}
        run: |
          export ENVIRONMENT=${{ inputs.environment }}
          make init

      - name: Terraform Plan
        working-directory: ${{ vars.TERRAFORM_DIR_PATH }}
        run: |
          make plan environment=${{ inputs.environment }} aws_account_name=int

  terraform-apply:
    if: ${{ vars.SKIP_APPLY != 'true' }}
    needs: terraform-plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: int
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/auto-ops
          role-session-name: github-actions

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Terraform Init
        working-directory: ${{ vars.TERRAFORM_DIR_PATH }}
        run: |
          export ENVIRONMENT=${{ inputs.environment }}
          make init

      - name: Terraform Apply
        working-directory: ${{ vars.TERRAFORM_DIR_PATH }}
        run: |
          make plan environment=${{ inputs.environment }} aws_account_name=int

  e2e-tests:
    if: ${{ vars.RUN_E2E == 'true' && inputs.environment == vars.ACTIVE_ENVIRONMENT }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/auto-ops
          role-session-name: github-actions

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 2.1.2
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry --version

      - name: Set Poetry to use Python 3.10
        working-directory: ${{ vars.E2E_DIR_PATH }}
        run: |
          poetry env use $(which python3.10)

      - name: Install dependencies with Poetry
        working-directory: ${{ vars.E2E_DIR_PATH }}
        run: |
          poetry install --no-root

      - name: Install oathtool
        run: sudo apt-get update && sudo apt-get install -y oathtool

      - name: Get JWT token for apigee
        env:
          APIGEE_USERNAME: ${{ vars.APIGEE_USERNAME }}
          APIGEE_PASSWORD: ${{ secrets.APIGEE_PASSWORD }}
          MFA_CODE: ${{ env.MFA_CODE }}
          APIGEE_OAUTH_TOKEN: ${{ secrets.APIGEE_OAUTH_TOKEN }}
          OTP_SECRET: ${{ secrets.APIGEE_OTP_KEY }}
        run: |
            CODE=$(oathtool --totp -b "$OTP_SECRET")
            echo "::add-mask::$CODE"

            echo "Requesting access token from Apigee..."

            response=$(curl -s -X POST "https://login.apigee.com/oauth/token" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -H "Accept: application/json;charset=utf-8" \
              -H "Authorization: Basic $APIGEE_OAUTH_TOKEN" \
              -d "username=$APIGEE_USERNAME&password=$APIGEE_PASSWORD&mfa_token=$CODE&grant_type=password")

            token=$(echo "$response" | jq -r '.access_token // empty')

            if [[ -z "$token" ]]; then
              echo "Failed to retrieve access token"
              exit 1
            fi

            echo "::add-mask::$token"
            echo "APIGEE_ACCESS_TOKEN=$token" >> $GITHUB_ENV

      - name: Run e2e tests
        working-directory: ${{ vars.E2E_DIR_PATH }}
        env:
          APIGEE_ACCESS_TOKEN: ${{ env.APIGEE_ACCESS_TOKEN }}
          APIGEE_USERNAME: apm-testing-internal-dev@nhs.net
        run: |
          export APIGEE_ENVIRONMENT=internal-dev
          export PROXY_NAME=immunisation-fhir-api-int-${{ inputs.environment }}
          export SERVICE_BASE_PATH=immunisation-fhir-api/FHIR/R4-int-${{ inputs.environment }}

          make run-immunization
